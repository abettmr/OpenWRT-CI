#云编译公用核心
name: OpenWRT-CORE_mt798x

on:
  workflow_call:
    inputs:
      OWRT_BRANCH:
        required: true
        type: string
      OWRT_TARGET:
        required: true
        type: string
      OWRT_THEME:
        required: true
        type: string
      OWRT_NAME:
        required: true
        type: string
      OWRT_URL:
        required: true
        type: string
      OWRT_PW:
        required: true
        type: string
      OWRT_IP:
        required: true
        type: string

env:
  GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
  OWRT_BRANCH: ${{inputs.OWRT_BRANCH}}
  OWRT_TARGET: ${{inputs.OWRT_TARGET}}
  OWRT_THEME: ${{inputs.OWRT_THEME}}
  OWRT_NAME: ${{inputs.OWRT_NAME}}
  OWRT_URL: ${{inputs.OWRT_URL}}
  OWRT_PW: ${{inputs.OWRT_PW}}
  OWRT_IP: ${{inputs.OWRT_IP}}

jobs:
  owrt_core:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Projects
        uses: actions/checkout@main

      - name: Initialization Environment
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          docker rmi $(docker images -q)
          sudo -E apt -yqq update
          sudo -E apt -yqq purge $(sed -n "1{s/\r$//g;p;q}" $GITHUB_WORKSPACE/Depends.txt)
          sudo -E apt -yqq full-upgrade
          sudo -E apt -yqq install $(sed -n "2{s/\r$//g;p;q}" $GITHUB_WORKSPACE/Depends.txt)
          sudo -E apt -yqq autoremove --purge
          sudo -E apt -yqq autoclean
          sudo -E apt -yqq clean
          sudo -E systemctl daemon-reload
          sudo -E timedatectl set-timezone "Asia/Shanghai"
          sudo -E rm -rf $(sed -n "3{s/\r$//g;p;q}" $GITHUB_WORKSPACE/Depends.txt)

      - name: Initialization Values
        run: |
          export OWRT_DATE=$(TZ=UTC-8 date +"%y.%m.%d_%H.%M.%S")
          export OWRT_SOURCE=$(echo $OWRT_URL | cut -d '/' -f 5-)
          export OWRT_TYPE=$(sed -n "1{s/^#//;s/\r$//;p;q}" $GITHUB_WORKSPACE/Config/$OWRT_TARGET.txt)

          echo "OWRT_SOURCE=$OWRT_SOURCE" >> $GITHUB_ENV
          echo "OWRT_TARGET=$OWRT_TARGET" >> $GITHUB_ENV
          echo "OWRT_DATE=$OWRT_DATE" >> $GITHUB_ENV
          echo "OWRT_TYPE=$OWRT_TYPE" >> $GITHUB_ENV
          echo "OWRT_PW=$OWRT_PW" >> $GITHUB_ENV
          echo "OWRT_IP=$OWRT_IP" >> $GITHUB_ENV

      - name: Clone OWRT Code
        run: |
          git clone --depth=1 --single-branch --branch "$OWRT_BRANCH" $OWRT_URL ./owrt

      - name: Update Feeds
        run: |
          cd ./owrt
          # turboacc
          mkdir -p turboacc_tmp ./package/turboacc
          cd turboacc_tmp 
          git clone https://github.com/chenmozhijin/turboacc -b package
          cd ../package/turboacc
          git clone https://github.com/fullcone-nat-nftables/nft-fullcone
          git clone https://github.com/chenmozhijin/turboacc
          mv ./turboacc/luci-app-turboacc ./luci-app-turboacc
          rm -rf ./turboacc
          cd ../..
          cp -f turboacc_tmp/turboacc/hack-5.15/952-add-net-conntrack-events-support-multiple-registrant.patch ./target/linux/generic/hack-5.15/952-add-net-conntrack-events-support-multiple-registrant.patch
          cp -f turboacc_tmp/turboacc/hack-5.15/953-net-patch-linux-kernel-to-support-shortcut-fe.patch ./target/linux/generic/hack-5.15/953-net-patch-linux-kernel-to-support-shortcut-fe.patch
          cp -f turboacc_tmp/turboacc/pending-5.15/613-netfilter_optional_tcp_window_check.patch ./target/linux/generic/pending-5.15/613-netfilter_optional_tcp_window_check.patch
          rm -rf ./package/libs/libnftnl ./package/network/config/firewall4 ./package/network/utils/nftables
          mkdir -p ./package/network/config/firewall4 ./package/libs/libnftnl ./package/network/utils/nftables
          cp -r ./turboacc_tmp/turboacc/shortcut-fe ./package/turboacc
          cp -RT ./turboacc_tmp/turboacc/firewall4-$(grep -o 'FIREWALL4_VERSION=.*' ./turboacc_tmp/turboacc/version | cut -d '=' -f 2)/firewall4 ./package/network/config/firewall4
          cp -RT ./turboacc_tmp/turboacc/libnftnl-$(grep -o 'LIBNFTNL_VERSION=.*' ./turboacc_tmp/turboacc/version | cut -d '=' -f 2)/libnftnl ./package/libs/libnftnl
          cp -RT ./turboacc_tmp/turboacc/nftables-$(grep -o 'NFTABLES_VERSION=.*' ./turboacc_tmp/turboacc/version | cut -d '=' -f 2)/nftables ./package/network/utils/nftables
          rm -rf turboacc_tmp
          echo "# CONFIG_NF_CONNTRACK_CHAIN_EVENTS is not set" >> target/linux/generic/config-5.15
          echo "# CONFIG_SHORTCUT_FE is not set" >> target/linux/generic/config-5.15
          # turboacc ends
          ./scripts/feeds update -a
          ./scripts/feeds install -a

      - name: Check Scripts
        run: |
          find ./ -maxdepth 2 -type f -iregex ".*\(txt\|sh\)$" -exec dos2unix {} \; -exec chmod +x {} \;

      - name: Custom Scripts
        run: |
          cd ./owrt
          #修改默认主题
          sed -i "s/luci-theme-bootstrap/luci-theme-$OWRT_THEME/g" $(find ./feeds/luci/collections/ -type f -name "Makefile")
          #修改默认IP地址
          sed -i "s/192\.168\.[0-9]*\.[0-9]*/$OWRT_IP/g" ./package/base-files/files/bin/config_generate
          #修改默认主机名
          sed -i "s/hostname='.*'/hostname='$OWRT_NAME'/g" ./package/base-files/files/bin/config_generate
          #修改默认时区
          sed -i "s/timezone='.*'/timezone='CST-8'/g" ./package/base-files/files/bin/config_generate
          sed -i "/timezone='.*'/a\\\t\t\set system.@system[-1].zonename='Asia/Shanghai'" ./package/base-files/files/bin/config_generate
          # $GITHUB_WORKSPACE/Scripts/Settings.sh

          # cd ./package

          # $GITHUB_WORKSPACE/Scripts/Plugins.sh

      - name: Custom Settings
        run: |
          cd ./owrt

          rm -rf ./tmp* ./.config*

          # cat $GITHUB_WORKSPACE/Config/$OWRT_TARGET.txt $GITHUB_WORKSPACE/Config/General.txt >> .config
          # cp -f defconfig/mt7981-ax3000.config .config
          cp -f $GITHUB_WORKSPACE/default.config .config
          echo "CONFIG_TARGET_PROFILE=\"DEVICE_abt_asr3000\"" >> .config
          echo "CONFIG_TARGET_mediatek_mt7981_DEVICE_abt_asr3000=y" >> .config
          echo "CONFIG_PACKAGE_luci-theme-$OWRT_THEME=y" >> .config
          echo "CONFIG_PACKAGE_luci-app-$OWRT_THEME-config=y" >> .config

          if [[ $OWRT_URL != *"lede"* ]] ; then
            echo "CONFIG_PACKAGE_luci=y" >> .config
            echo "CONFIG_LUCI_LANG_zh_Hans=y" >> .config
          fi

          make defconfig

      - name: Cleanup Toolchain
        run: |
          cd ./owrt

          make dirclean

      - name: Download Packages
        run: |
          cd ./owrt

          make download -j$(nproc)

      - name: Compile Firmware
        run: |
          cd ./owrt

          make -j$(nproc) || make -j1 V=s

      - name: Space Usage
        run: |
          cd ./owrt

          echo "======================="
          df -h
          echo "======================="
          du -h --max-depth=1
          echo "======================="

      - name: Package Firmware
        run: |
          cd ./owrt && mkdir ./upload

          rm -rf $(find ./bin/targets/ -iregex ".*\(json\|manifest\|buildinfo\|sha256sums\|packages\)$")
          cp -rf $(find ./bin/targets/ -type f -iname "*.*") ./upload/
          cp -rf ./.config ./upload/Config_"$OWRT_TARGET"_"$OWRT_SOURCE"_"$OWRT_DATE".txt

          cd ./upload

          for var in $OWRT_TYPE ; do
            for file in $(find ./ -type f -iname "*$var*.*" ! -iname "*.txt") ; do
              export ext=$(basename "$file" | cut -d '.' -f 2-)
              export name=$(basename "$file" | cut -d '.' -f 1 | grep -io "\($var\).*")
              export new_file="$OWRT_SOURCE"_"$name"_"$OWRT_DATE"."$ext"
              mv -f "$file" "$new_file"
            done
          done

      - name: Release Firmware
        uses: softprops/action-gh-release@master
        with:
          tag_name: ${{env.OWRT_TARGET}}_${{env.OWRT_SOURCE}}_${{env.OWRT_DATE}}
          files: ./owrt/upload/*.*
          body: |
            这是个平台固件包，内含多个设备！
            请注意选择你需要的设备固件！
            不要问，更就完事了！

            源码：${{env.OWRT_SOURCE}}
            平台：${{env.OWRT_TARGET}}
            设备：${{env.OWRT_TYPE}}
            密码：${{env.OWRT_PW}}
            地址：${{env.OWRT_IP}}

      - name: Delete Old Releases
        uses: dev-drprasad/delete-older-releases@master
        with:
          keep_latest: 6
          delete_tags: true

      - name: Delete Old Workflows
        uses: Mattraks/delete-workflow-runs@main
        with:
          retain_days: 0
          keep_minimum_runs: 1
